Exercise 24

Michael Chambers - 191125

Results
$ python 24.py Durban
Influenza B virus (B/Durban/55/98) (taxid: 224960)
Influenza B virus (B/Durban/56/98) (taxid: 224961)
Sparodon durbanensis (taxid: 119748)
Influenza B virus (B/Durban/39/98) (taxid: 224981)
Influenza B virus (B/Durban/43/98) (taxid: 224957)
Influenza B virus (B/Durban/44/98) (taxid: 224958)
Influenza B virus (B/Durban/52/98) (taxid: 224959)

Method
1. Import the model.py module to organize the taxa.db3 file as an object
2. Query the name table with input string
3. Select all taxIDs in the name table with matches to the query and add taxID to set
4. Return an error if the final taxID set is empty
5. If taxID set is not empty, iterate through the set and print the scientific name from the taxonomy table with a matching taxID

Strengths
- Light code - looks much better using database as an object rather than queries through sqlite 
- Uses the 'name' table as a repository for all common names, used for the initial query search
- Uses the 'taxonomy' table as a final output for scientific names
- Uses a set of taxIDs to cut redundancy in the print statement
- Query can be multiple words as long as entire entry is flanked by quotes

Weaknesses
- Limited search capacity (regex?)
- Could be a nice addition to show the group of hits in the name table associated with the single scientific name

Tests
- tried using '%' in the query but did not act as expected for an SQL query
- searched for entity with multiple entries in the names table and returned single scientific name
- searched for item not in the database, returns error prompt
- search can handle multi-word query if entire query is place in quotes

What I learned
- learned a lot about sql queries through these two exercises, had never done before
- I prefer the object oriented method, simplifies the code but requires an upfront effort to initialize the database
